{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tktvdabC18-s"
   },
   "source": [
    "\n",
    "# Convolutional Neural Networks for Object Localization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "niJxVteL18-y"
   },
   "source": [
    "In this notebook we will learn how to implement a convolutional neural network (CNN) regressor to localize digits of the MNIST dataset. We will use the Pytorch library for the implementation, compilation and training of the model.\n",
    "\n",
    "The input to our model is a $64 \\times 64$ image with a MNIST digit at any location, and the output of the model are four real numbers that define a bounding box (x, y, width, and height) around the digit."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "921un8bjnFV4"
   },
   "source": [
    "<table>\n",
    "    <tr>\n",
    "        <td><img src=\"data:image/png;base64, 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\"></td>\n",
    "        <td><span style=\"font-size:36px\">&#10142;</span></td>\n",
    "        <td><img src=\"data:image/png;base64, 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\"></td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "exltrVHJnFV8"
   },
   "source": [
    "### Import necessary modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "azXeT9WlnFWA"
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torchvision import datasets, transforms\n",
    "from torch.optim.lr_scheduler import StepLR\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from torchsummary import summary\n",
    "\n",
    "# setup cuda\n",
    "use_cuda = torch.cuda.is_available()\n",
    "device = torch.device(\"cuda\" if use_cuda else \"cpu\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "xJG-7PGF18-0"
   },
   "source": [
    "## Create a custom dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1xicFSzH18-1"
   },
   "source": [
    "First of all we need a custom dataset class to create our training/test samples. This class creates synthetic images by placing MNIST numbers (wich have a size $28 \\times 28$) at random locations of a black $64 \\times 64$ canvas image."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DkhNGoQtqVHJ"
   },
   "source": [
    "Since Yann LeCun's server has been down, there have been issues in downloading MNIST over the past few days. So we'll download it from somewhere else."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "dpM9U6eUpjPJ",
    "outputId": "476210a3-62b0-47a1-97eb-34692eb6f54d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2021-03-30 10:47:15--  http://www.di.ens.fr/~lelarge/MNIST.tar.gz\n",
      "Resolving www.di.ens.fr (www.di.ens.fr)... 129.199.99.14\n",
      "Connecting to www.di.ens.fr (www.di.ens.fr)|129.199.99.14|:80... connected.\n",
      "HTTP request sent, awaiting response... 302 Found\n",
      "Location: https://www.di.ens.fr/~lelarge/MNIST.tar.gz [following]\n",
      "--2021-03-30 10:47:15--  https://www.di.ens.fr/~lelarge/MNIST.tar.gz\n",
      "Connecting to www.di.ens.fr (www.di.ens.fr)|129.199.99.14|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: unspecified [application/x-gzip]\n",
      "Saving to: ‘MNIST.tar.gz’\n",
      "\n",
      "MNIST.tar.gz            [       <=>          ]  33.20M  6.86MB/s    in 14s     \n",
      "\n",
      "2021-03-30 10:47:29 (2.40 MB/s) - ‘MNIST.tar.gz’ saved [34813078]\n",
      "\n",
      "MNIST/\n",
      "MNIST/raw/\n",
      "MNIST/raw/train-labels-idx1-ubyte\n",
      "MNIST/raw/t10k-labels-idx1-ubyte.gz\n",
      "MNIST/raw/t10k-labels-idx1-ubyte\n",
      "MNIST/raw/t10k-images-idx3-ubyte.gz\n",
      "MNIST/raw/train-images-idx3-ubyte\n",
      "MNIST/raw/train-labels-idx1-ubyte.gz\n",
      "MNIST/raw/t10k-images-idx3-ubyte\n",
      "MNIST/raw/train-images-idx3-ubyte.gz\n",
      "MNIST/processed/\n",
      "MNIST/processed/training.pt\n",
      "MNIST/processed/test.pt\n"
     ]
    }
   ],
   "source": [
    "!wget www.di.ens.fr/~lelarge/MNIST.tar.gz\n",
    "!tar -zxvf MNIST.tar.gz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "RhvETBzY18-2"
   },
   "outputs": [],
   "source": [
    "class MNISTlocalizationDataset(Dataset):\n",
    "    \"\"\"MNIST localization toy dataset.\"\"\"\n",
    "\n",
    "    def __init__(self, imgsize=(64,64), train=True, transform=None):\n",
    "        \"\"\"\n",
    "        Args:\n",
    "            imgsize (tuple (int,int), optional) - the size of generated images,\n",
    "                both width and height must be > 48\n",
    "            train (bool, optional) – If True, creates dataset from MNIST training\n",
    "                samples, otherwise from test\n",
    "            transform (callable, optional): Optional transform to be applied\n",
    "                on a sample.\n",
    "        \"\"\"\n",
    "        assert len(imgsize)==2 and imgsize[0] > 48 and imgsize[1] > 48\n",
    "        self.imgsize = imgsize\n",
    "        self.transform = transform\n",
    "        self.mnist = datasets.MNIST('./', train=train, download=True)\n",
    "\n",
    "    def __len__(self):\n",
    "        return self.mnist.data.shape[0]\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        if torch.is_tensor(idx):\n",
    "            idx = idx.tolist()\n",
    "        image = torch.zeros(self.imgsize)\n",
    "        digit_img = self.mnist.data[idx,:,:]\n",
    "\n",
    "        # copy the MNIST digit into a random location\n",
    "        x_offset = np.random.randint(0,self.imgsize[1]-28)\n",
    "        y_offset = np.random.randint(0,self.imgsize[0]-28)\n",
    "        image[y_offset:y_offset+28,x_offset:x_offset+28] = digit_img\n",
    "        image = image.reshape((1,)+self.imgsize) # must be a tensor image of size (C, H, W)\n",
    "        \n",
    "        if self.transform:\n",
    "            image = self.transform(image)\n",
    "\n",
    "        # get label of sample\n",
    "        label = self.mnist.targets[idx]\n",
    "\n",
    "        # normalize the target values so they are real numbers from 0. to 1.\n",
    "        bbox = np.array([x_offset / self.imgsize[1], y_offset / self.imgsize[0], \n",
    "                         28. / self.imgsize[0], 28. / self.imgsize[1]], dtype=np.float32)\n",
    "        \n",
    "        sample = {'image': image, 'bbox': bbox, 'label':label}\n",
    "        return sample"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "kE7Blf93nFWM"
   },
   "source": [
    "Now we can create the necessary Dataset and DataLoader objects as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "gfgAf0yunFWN"
   },
   "outputs": [],
   "source": [
    "transform=transforms.Compose([transforms.Normalize((0.1307,), (0.3081,))])\n",
    "\n",
    "dataset1 = MNISTlocalizationDataset((64,64), train=True, transform=transform)\n",
    "dataset2 = MNISTlocalizationDataset((64,64), train=False, transform=transform)\n",
    "\n",
    "train_kwargs = {'batch_size': 64,   'shuffle': True,  'num_workers': 1,  'pin_memory': True}\n",
    "test_kwargs  = {'batch_size': 1000, 'shuffle': False, 'num_workers': 1,  'pin_memory': True}\n",
    "\n",
    "train_loader = DataLoader(dataset1, **train_kwargs)\n",
    "test_loader = DataLoader(dataset2, **test_kwargs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mS-cmCLP18-2"
   },
   "source": [
    "### Visualize some generated samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "4aAtRuL-18-2",
    "outputId": "06ddade0-cac7-47bb-94a6-3d29a916f33a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 torch.Size([1, 64, 64]) (4,)\n",
      "1 torch.Size([1, 64, 64]) (4,)\n",
      "2 torch.Size([1, 64, 64]) (4,)\n",
      "3 torch.Size([1, 64, 64]) (4,)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def show_bbox(image, bbox, pred=None,**kwargs):\n",
    "    \"\"\"Show image with bbox\"\"\"\n",
    "    image = image.squeeze()\n",
    "    plt.imshow(image)\n",
    "\n",
    "    # plot the ground truth bounding box\n",
    "    imgsize = image.shape\n",
    "    bbox *= [imgsize[1],imgsize[0],imgsize[0],imgsize[1]]\n",
    "    plt.plot([bbox[0],bbox[0]+bbox[3],bbox[0]+bbox[3],bbox[0],bbox[0]],\n",
    "             [bbox[1],bbox[1],bbox[1]+bbox[2],bbox[1]+bbox[2],bbox[1]], c='r')\n",
    "\n",
    "    if pred is not None: \n",
    "        # plot the predicted bounding box (if provided)\n",
    "        pred *= [imgsize[1],imgsize[0],imgsize[0],imgsize[1]]\n",
    "        plt.plot([pred[0],pred[0]+pred[3],pred[0]+pred[3],pred[0],pred[0]],\n",
    "                 [pred[1],pred[1],pred[1]+pred[2],pred[1]+pred[2],pred[1]], c='b')\n",
    "    \n",
    "fig = plt.figure()\n",
    "for i in range(len(dataset1)):\n",
    "    sample = dataset1[i]\n",
    "    print(i, sample['image'].shape, sample['bbox'].shape)\n",
    "    ax = plt.subplot(1, 4, i + 1)\n",
    "    plt.tight_layout()\n",
    "    ax.set_title(f\"Sample #{i} \\n Label{sample['label']}\")\n",
    "    ax.axis('off')\n",
    "    show_bbox(**sample)\n",
    "\n",
    "    if i == 3:\n",
    "        plt.show()\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "aszWIV0m18-5",
    "outputId": "93a8b2b8-fe93-43a1-9ce2-e1c05e883de1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of training data: 60000\n",
      "Size of test data: 10000\n"
     ]
    }
   ],
   "source": [
    "# check the size of the dataset\n",
    "print(\"Size of training data: {}\".format(len(dataset1)))\n",
    "print(\"Size of test data: {}\".format(len(dataset2)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gmOpSBhE18-3"
   },
   "source": [
    "We have 60,000 images for training and 10,000 for testing. The image size is $64 \\times 64$ pixels and they have only one channel (greyscale images)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DyLPtyuE18-7"
   },
   "source": [
    "## Create the CNN regression model\n",
    "\n",
    "We will use a simple CNN model with two convolutional layers, one pooling layer, and two fully connected layers. We will use also Dropout to help regularizing the model. \n",
    "\n",
    "Notice that the output layer has four neurons with a `sigmoid` activation, so our model produces at its outputs four real numbers (x,y,width, and height)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "s7dNybnGphHF",
    "outputId": "8849104a-98ab-41f7-c1d3-7d4fd03d0b97"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------\n",
      "        Layer (type)               Output Shape         Param #\n",
      "================================================================\n",
      "            Conv2d-1            [-1, 8, 32, 32]             208\n",
      "              ReLU-2            [-1, 8, 32, 32]               0\n",
      "            Conv2d-3           [-1, 16, 16, 16]           1,168\n",
      "              ReLU-4           [-1, 16, 16, 16]               0\n",
      "            Conv2d-5             [-1, 32, 8, 8]           4,640\n",
      "              ReLU-6             [-1, 32, 8, 8]               0\n",
      "            Conv2d-7             [-1, 32, 4, 4]           9,248\n",
      "              ReLU-8             [-1, 32, 4, 4]               0\n",
      " AdaptiveAvgPool2d-9             [-1, 32, 1, 1]               0\n",
      "          Flatten-10                   [-1, 32]               0\n",
      "           Linear-11                    [-1, 4]             132\n",
      "          Sigmoid-12                    [-1, 4]               0\n",
      "           Linear-13                   [-1, 10]             330\n",
      "================================================================\n",
      "Total params: 15,726\n",
      "Trainable params: 15,726\n",
      "Non-trainable params: 0\n",
      "----------------------------------------------------------------\n",
      "Input size (MB): 0.02\n",
      "Forward/backward pass size (MB): 0.23\n",
      "Params size (MB): 0.06\n",
      "Estimated Total Size (MB): 0.30\n",
      "----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "class Net(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Net, self).__init__()\n",
    "        self.backbone = nn.Sequential(\n",
    "          nn.Conv2d( 1, 8, 5, padding=2,stride=2), nn.ReLU(), #14\n",
    "          nn.Conv2d( 8,16, 3, padding=1,stride=2), nn.ReLU(), # 7\n",
    "          nn.Conv2d(16,32, 3, padding=1,stride=2), nn.ReLU(), # 4\n",
    "          nn.Conv2d(32,32, 3, padding=1,stride=2), nn.ReLU(), # 2\n",
    "          nn.AdaptiveAvgPool2d(1),\n",
    "          nn.Flatten(),\n",
    "          # nn.Linear(32,4),\n",
    "          # nn.Sigmoid()\n",
    "          )\n",
    "        \n",
    "        self.bbox = nn.Sequential(nn.Linear(32,4), nn.Sigmoid())\n",
    "        self.label = nn.Sequential(nn.Linear(32, 10))\n",
    "\n",
    "    def forward(self, x):\n",
    "        features = self.backbone(x)\n",
    "        bbox = self.bbox(features)\n",
    "        label = self.label(features)\n",
    "        return bbox, label\n",
    "\n",
    "def get_model():\n",
    "    return Net()\n",
    "\n",
    "summary(get_model(),(1,64,64),device=\"cpu\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ndYgcQkW18-8"
   },
   "source": [
    "### Define the training method\n",
    "\n",
    "For training our CNN regression model we will use the L1 loss, which takes the mean element-wise absolute value difference.\n",
    "\n",
    "See <a href=\"https://pytorch.org/docs/stable/generated/torch.nn.L1Loss.html#torch.nn.L1Loss\">`torch.nn.L1Loss`</a> for details."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ggil4ry9wmiP"
   },
   "outputs": [],
   "source": [
    "def train(model, device, train_loader, optimizer, epoch, scheduler=None):\n",
    "    model.train()\n",
    "    loss_values = []\n",
    "    bbox_loss_values = []\n",
    "    classification_loss_values = []\n",
    "    for batch_idx, sample_batched in enumerate(train_loader):\n",
    "        data = sample_batched['image']\n",
    "        target = sample_batched['bbox']\n",
    "        label = sample_batched['label']\n",
    "        data, target, label = data.to(device), target.to(device), label.to(device)\n",
    "        output, label_pred = model(data)\n",
    "\n",
    "        bbox_loss = F.l1_loss(output, target)\n",
    "        classification_loss = F.cross_entropy(label_pred, label)\n",
    "        # balance the bbox_loss and classification_loss (try out what combination works best)\n",
    "        loss = bbox_loss + 0.1*classification_loss\n",
    "        \n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        optimizer.zero_grad()\n",
    "\n",
    "        loss_values.append(loss)\n",
    "        bbox_loss_values.append(bbox_loss)\n",
    "        classification_loss_values.append(classification_loss)\n",
    "\n",
    "        if batch_idx % log_interval == 0:\n",
    "            print('Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'.format(\n",
    "                epoch, batch_idx * len(data), len(train_loader.dataset),\n",
    "                100. * batch_idx / len(train_loader), loss.item()))\n",
    "        if scheduler is not None:\n",
    "            scheduler.step()\n",
    "    return loss_values, bbox_loss_values, classification_loss_values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "oOvIRgNG18-8"
   },
   "source": [
    "### Train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "7yGqDf0w18-9",
    "outputId": "5944def7-e15b-4fc0-bfdc-27968e26c70f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Epoch: 1 [0/60000 (0%)]\tLoss: 0.360304\n",
      "Train Epoch: 1 [6400/60000 (11%)]\tLoss: 0.284879\n",
      "Train Epoch: 1 [12800/60000 (21%)]\tLoss: 0.269482\n",
      "Train Epoch: 1 [19200/60000 (32%)]\tLoss: 0.227970\n",
      "Train Epoch: 1 [25600/60000 (43%)]\tLoss: 0.152765\n",
      "Train Epoch: 1 [32000/60000 (53%)]\tLoss: 0.111488\n",
      "Train Epoch: 1 [38400/60000 (64%)]\tLoss: 0.093181\n",
      "Train Epoch: 1 [44800/60000 (75%)]\tLoss: 0.093473\n",
      "Train Epoch: 1 [51200/60000 (85%)]\tLoss: 0.070068\n",
      "Train Epoch: 1 [57600/60000 (96%)]\tLoss: 0.075677\n",
      "Train Epoch: 2 [0/60000 (0%)]\tLoss: 0.063609\n",
      "Train Epoch: 2 [6400/60000 (11%)]\tLoss: 0.115470\n",
      "Train Epoch: 2 [12800/60000 (21%)]\tLoss: 0.065167\n",
      "Train Epoch: 2 [19200/60000 (32%)]\tLoss: 0.072183\n",
      "Train Epoch: 2 [25600/60000 (43%)]\tLoss: 0.060732\n",
      "Train Epoch: 2 [32000/60000 (53%)]\tLoss: 0.067042\n",
      "Train Epoch: 2 [38400/60000 (64%)]\tLoss: 0.060544\n",
      "Train Epoch: 2 [44800/60000 (75%)]\tLoss: 0.043620\n",
      "Train Epoch: 2 [51200/60000 (85%)]\tLoss: 0.046483\n",
      "Train Epoch: 2 [57600/60000 (96%)]\tLoss: 0.050483\n",
      "Train Epoch: 3 [0/60000 (0%)]\tLoss: 0.070214\n",
      "Train Epoch: 3 [6400/60000 (11%)]\tLoss: 0.045700\n",
      "Train Epoch: 3 [12800/60000 (21%)]\tLoss: 0.046375\n",
      "Train Epoch: 3 [19200/60000 (32%)]\tLoss: 0.025678\n",
      "Train Epoch: 3 [25600/60000 (43%)]\tLoss: 0.044162\n",
      "Train Epoch: 3 [32000/60000 (53%)]\tLoss: 0.043240\n",
      "Train Epoch: 3 [38400/60000 (64%)]\tLoss: 0.043297\n",
      "Train Epoch: 3 [44800/60000 (75%)]\tLoss: 0.039578\n",
      "Train Epoch: 3 [51200/60000 (85%)]\tLoss: 0.048486\n",
      "Train Epoch: 3 [57600/60000 (96%)]\tLoss: 0.073234\n",
      "Train Epoch: 4 [0/60000 (0%)]\tLoss: 0.030099\n",
      "Train Epoch: 4 [6400/60000 (11%)]\tLoss: 0.029977\n",
      "Train Epoch: 4 [12800/60000 (21%)]\tLoss: 0.028527\n",
      "Train Epoch: 4 [19200/60000 (32%)]\tLoss: 0.028976\n",
      "Train Epoch: 4 [25600/60000 (43%)]\tLoss: 0.031494\n",
      "Train Epoch: 4 [32000/60000 (53%)]\tLoss: 0.032486\n",
      "Train Epoch: 4 [38400/60000 (64%)]\tLoss: 0.032351\n",
      "Train Epoch: 4 [44800/60000 (75%)]\tLoss: 0.023763\n",
      "Train Epoch: 4 [51200/60000 (85%)]\tLoss: 0.029115\n",
      "Train Epoch: 4 [57600/60000 (96%)]\tLoss: 0.019246\n",
      "Train Epoch: 5 [0/60000 (0%)]\tLoss: 0.029555\n",
      "Train Epoch: 5 [6400/60000 (11%)]\tLoss: 0.034810\n",
      "Train Epoch: 5 [12800/60000 (21%)]\tLoss: 0.017711\n",
      "Train Epoch: 5 [19200/60000 (32%)]\tLoss: 0.023844\n",
      "Train Epoch: 5 [25600/60000 (43%)]\tLoss: 0.023787\n",
      "Train Epoch: 5 [32000/60000 (53%)]\tLoss: 0.019621\n",
      "Train Epoch: 5 [38400/60000 (64%)]\tLoss: 0.032646\n",
      "Train Epoch: 5 [44800/60000 (75%)]\tLoss: 0.023722\n",
      "Train Epoch: 5 [51200/60000 (85%)]\tLoss: 0.036009\n",
      "Train Epoch: 5 [57600/60000 (96%)]\tLoss: 0.022857\n"
     ]
    }
   ],
   "source": [
    "model = get_model().to(device)\n",
    "\n",
    "lr = 1e-2\n",
    "optimizer = optim.Adam(model.parameters(), lr=lr)\n",
    "\n",
    "epochs = 5\n",
    "scheduler = optim.lr_scheduler.OneCycleLR(optimizer, lr, epochs=epochs, steps_per_epoch=len(train_loader))\n",
    "\n",
    "log_interval = 100 # how many batches to wait before logging training status\n",
    "\n",
    "loss_history = []\n",
    "bbox_loss_history = []\n",
    "classification_loss_history = []\n",
    "for epoch in range(1, epochs + 1):\n",
    "    loss_values, bbox_loss_values, classification_loss_values = train(model, device, train_loader, optimizer, epoch, scheduler)\n",
    "    loss_history += loss_values\n",
    "    bbox_loss_history += bbox_loss_values\n",
    "    classification_loss_history += classification_loss_values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mIMOMKRh18--"
   },
   "source": [
    "### Plot the loss over time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 483
    },
    "id": "Jb2ocuvo18--",
    "outputId": "2a13cb65-670b-4c7d-882d-1af814e9feb9"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16,8))\n",
    "plt.plot(np.arange(len(loss_history)), loss_history, label='Total Loss')\n",
    "plt.plot(np.arange(len(loss_history)), bbox_loss_history, label='Bbox Loss')\n",
    "plt.plot(np.arange(len(loss_history)), classification_loss_history, label='Class loss')\n",
    "plt.legend(loc=\"upper right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5tWPmXhk18--"
   },
   "source": [
    "## Evaluate the model\n",
    "\n",
    "Finally, we can use the trained model to predict a bounding box for any given image. Let's see how to make predictions for the first four images of the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 152
    },
    "id": "JMecAtU618--",
    "outputId": "84a25ff9-057b-420c-a65c-e9278f8f7ebf"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.eval()\n",
    "\n",
    "fig = plt.figure()\n",
    "for i in range(5):\n",
    "    # get a random index\n",
    "    idx = np.random.randint(0,len(dataset2))\n",
    "    sample = dataset2[idx]\n",
    "    ax = plt.subplot(1, 4, i + 1)\n",
    "    plt.tight_layout()\n",
    "    ax.set_title('Sample #{}'.format(i))\n",
    "    ax.axis('off')\n",
    "    \n",
    "    # predict the bounding box for a given image\n",
    "    data = sample['image']\n",
    "    data = data.reshape((1,)+data.shape) # shape must be (b,c,h,w)\n",
    "    data = data.to(device)\n",
    "    with torch.no_grad():\n",
    "      output, label_pred = model(data)\n",
    "        \n",
    "    sample['pred'] = output[0].cpu().numpy()\n",
    "    label_pred = (torch.argmax(label_pred)).cpu().numpy()\n",
    "    show_bbox(**sample)\n",
    "    ax.set_title(f\"Sample #{i} \\n Label {sample['label']} \\n Pred: {label_pred}\")\n",
    "\n",
    "    if i == 3:\n",
    "        plt.show()\n",
    "        break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "xIulY-aDnFWx"
   },
   "source": [
    "We appreciate that the predicted bounding boxes (blue) are good aproximations of the ground truth (red).\n",
    "\n",
    "In order to measure whether the results are correct or not in the entire test set we need to implement a performance measure based on the Intersection over Union (IoU) of the ground truth and predicted bounding boxes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "mQAjMYu0nFWz"
   },
   "outputs": [],
   "source": [
    "def IoU(pred, target, iou_threshold = 0.7):\n",
    "    # determine the coordinates of the intersection rectangle\n",
    "    x_left = np.maximum(pred[:,0], target[:,0])\n",
    "    y_top = np.maximum(pred[:,1], target[:,1])\n",
    "    x_right = np.minimum(pred[:,0]+pred[:,2], target[:,0]+target[:,2])\n",
    "    y_bottom = np.minimum(pred[:,1]+pred[:,3], target[:,1]+target[:,3])\n",
    "    \n",
    "    intersection_area = (x_right - x_left) * (y_bottom - y_top)\n",
    "    \n",
    "    # compute the areas of the union\n",
    "    pred_area = pred[:,2] * pred[:,3]\n",
    "    target_area =  target[:,2] *  target[:,3]\n",
    "    \n",
    "    union_area = pred_area + target_area - intersection_area\n",
    "    \n",
    "    iou = intersection_area / union_area\n",
    "    \n",
    "    return iou>iou_threshold"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "e-eALiMsnFW1"
   },
   "source": [
    "### Define the test method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "mGRtscbXnFW2",
    "outputId": "f2fd7c4e-2992-4e2e-de88-dd99e01ff3a2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Test set: Average bbox loss: 0.0097, Average classification loss: 0.0966 , BBox Accuracy: 9502/10000 (95%), Classification Accuracy: 9705/10000 (97%)  \n",
      "\n"
     ]
    }
   ],
   "source": [
    "def test(model, device, test_loader):\n",
    "    model.eval()\n",
    "    bbox_loss = 0\n",
    "    classification_loss = 0\n",
    "    correct_bbox = 0\n",
    "    correct_class = 0\n",
    "    with torch.no_grad():\n",
    "        for batch_idx, sample_batched in enumerate(test_loader):\n",
    "            data = sample_batched['image']\n",
    "            target = sample_batched['bbox']\n",
    "            label = sample_batched['label']\n",
    "            data, target, label = data.to(device), target.to(device), label.to(device)\n",
    "\n",
    "            output,label_pred = model(data)\n",
    "\n",
    "            bbox_loss += F.l1_loss(output, target).item()\n",
    "            classification_loss += F.cross_entropy(label_pred, label).item()\n",
    "            \n",
    "            # count the number of prediction with an IoU above a certain threshold\n",
    "            correct_bbox += np.sum(IoU(output.cpu().numpy(), target.cpu().numpy(), iou_threshold = 0.7))\n",
    "            \n",
    "            # count the number of predictions with the correct class predicted\n",
    "            correct_class += torch.sum(torch.argmax(label_pred.cpu(), dim=1) == label.cpu())\n",
    "\n",
    "    bbox_loss /= (len(test_loader.dataset)/test_loader.batch_size)\n",
    "    classification_loss /= (len(test_loader.dataset)/test_loader.batch_size)\n",
    "    \n",
    "    print('\\nTest set: Average bbox loss: {:.4f}, Average classification loss: {:.4f} , BBox Accuracy: {}/{} ({:.0f}%), Classification Accuracy: {}/{} ({:.0f}%)  \\n'.format(\n",
    "        bbox_loss,classification_loss, \n",
    "        correct_bbox, len(test_loader.dataset), 100. * correct_bbox / len(test_loader.dataset), \n",
    "        correct_class, len(test_loader.dataset), 100. * correct_class / len(test_loader.dataset)))\n",
    "    \n",
    "\n",
    "# call the test method\n",
    "test(model, device, test_loader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 285
    },
    "id": "MFi3JR4OnFW5",
    "outputId": "7d1f1fa7-0452-46be-d7f9-3031f677388f",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.13895947 0.4664136  0.4374906  0.43749902]] [[0.09375 0.53125 0.4375  0.4375 ]] [False]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Find wrong prediction and display it\n",
    "\n",
    "model.eval()\n",
    "\n",
    "fig = plt.figure()\n",
    "plt.tight_layout()\n",
    "ax.axis('off')\n",
    "ax = plt.subplot(1, 1, 1)\n",
    "for i in range(len(dataset2)):\n",
    "    sample = dataset2[i]\n",
    "    \n",
    "    # predict the bounding box for a given image\n",
    "    data = sample['image']\n",
    "    data = data.reshape((1,)+data.shape) # shape must be (b,c,h,w)\n",
    "    data = data.to(device)\n",
    "    with torch.no_grad():\n",
    "        output,label_pred = model(data)\n",
    "    \n",
    "    target = sample['bbox'].reshape((1,4))\n",
    "    iou= IoU(output.cpu().numpy(), target, iou_threshold = 0.7)\n",
    "    \n",
    "    if not iou:\n",
    "        print(output.cpu().numpy(), target,iou)\n",
    "        sample['pred'] = output[0].cpu().numpy()\n",
    "        show_bbox(**sample)\n",
    "        label = (torch.argmax(label_pred)).cpu().numpy()\n",
    "        ax.set_title(f\"Sample #{i} \\n Label {sample['label']} \\n Pred: {label}\")\n",
    "        break\n",
    "\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "CNN_MNIST_Localization - Part1 - Aditya Rana .ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
